import std/posix, os, strformat, std/strutils;

proc validateRootPrivileges() =
  ##[ checks if the user is root ]##
  if getuid() != 0:
    echo "You must be root to run this program.";
    quit(1);

proc check_file_exists(files: seq[string], path: string) =
  ##[ checks if the files exist in the given path ]##
  var notFoundFiles: seq[string];
  for file in files:
    if not fileExists(path & $file):
      notFoundFiles.add(file);

  if not notFoundFiles.len == 0:
    echo "Error: The following files are missing in the path: ";
    for file in notFoundFiles:
      echo file;
    quit(1);

proc create_bak_dir(path: string): string =
  ##[ creates backup directory ]##
  try:
    createDir(path & "backup");
    return path & "backup/";
  except OSError:
    echo "Error: " & getCurrentExceptionMsg();
    quit(1);

proc isSymlink(file: string): bool =
  ##[ checks if the file is a symlink ]##
  if symlinkExists(file):
    echo "Symlink found: " & extractFilename(file);
    return true;
  return false;

proc create_backup(source_path: string, dist_path: string) =
  ##[ creates backup of default nixos config in curr dir ]##
  let backup_dir_path = create_bak_dir(dist_path); # create backup dir
  for file in walkDir(source_path):
    if not isSymlink(file.path):
      try:
        moveFile(file.path, backup_dir_path & extractFilename(file.path) &
            ".bak");
      except OSError:
        echo "Error: " & getCurrentExceptionMsg();
    else:
      echo fmt"Cannot backup {file.path} as it's a symlink.";
      quit(1);

proc replace_hardware_conf(source_path: string, dist_path: string) =
  ##[ replaces hardware-configuration.nix file with default hardware-configuration.nix
    which is automatically generated by nixos during installation ]##
  for file in walkDir(source_path):
    if extractFilename(file.path) == "hardware-configuration.nix":
      if isSymlink(file.path):
        echo fmt"Cannot replace {file.path} with default hardware-configuration.nix as it's a symlink.";
      else:
        try:
        # lets copy the hardware-configuration.nix file to the current directory
          copyFile(file.path, dist_path & "hardware-configuration.nix");
        except CatchableError:
          echo "Error: " & getCurrentExceptionMsg();
          quit(1);

proc create_symlink(source_path: string, dist_path: string) =
  ##[ creates symlink of the default nixos configuration files in the current directory ]##
  const files = ["configuration.nix", "hardware-configuration.nix", "flake.nix",
      "flake.lock"];
  for file in files:
    try:
      os.createSymlink(dist_path & file, source_path & file);
    except CatchableError:
      echo "Error: " & getCurrentExceptionMsg();
      quit(1);

proc change_file_owner(curr_Dir: string) =
  ##[ changes the backup folder and files owner from root to current user ]##
  let backup_dir = curr_Dir & "backup/";
  if dirExists(backup_dir):
    # Get the original user's ID from environment variables
    let sudo_uid_str = getEnv("SUDO_UID")
    let sudo_gid_str = getEnv("SUDO_GID")

    if sudo_uid_str.len > 0 and sudo_gid_str.len > 0:
      let uid = Uid(parseInt(sudo_uid_str))
      let gid = Gid(parseInt(sudo_gid_str))

      echo "Changing ownership to UID: ", uid, " GID: ", gid

      # Change ownership of the backup directory itself
      if chown(backup_dir.cstring, uid, gid) != 0:
        echo "Error: Failed to change ownership of backup directory"
        quit(1)

      # Change ownership of all files within the backup directory
      for file in walkDir(backup_dir):
        if chown(file.path.cstring, uid, gid) != 0:
          echo "Error: Failed to change ownership of " & file.path
          quit(1)
    else:
      echo "Error: Could not determine original user (SUDO_UID/SUDO_GID not set)"
      quit(1)

proc main() =
  let TARGET_PATH = "/etc/nixos/"; # path to the default nixos configuration files
  let DEST_PATH = getCurrentDir() & "/"; # path to the current directory where the script is running
  let default_files = ["configuration.nix", "hardware-configuration.nix"]; # list of default nixos configuration files

  validateRootPrivileges()
  check_file_exists(@default_files,
    TARGET_PATH);
  replace_hardware_conf(TARGET_PATH, DEST_PATH);
  create_backup(TARGET_PATH, DEST_PATH);
  create_symlink(TARGET_PATH, DEST_PATH);
  change_file_owner(DEST_PATH);



main();
